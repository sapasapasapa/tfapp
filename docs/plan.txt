Terraform will perform the following actions:

  # module.vault_common.module.security_policy.google_compute_security_policy.main[0] will be updated in-place
  ~ resource "google_compute_security_policy" "main" {
        id          = "projects/vault-0/global/securityPolicies/custom-rules"
        name        = "custom-rules"
        # (5 unchanged attributes hidden)

      - rule {
          - action      = "deny(403)" -> null
          - description = "Block requests coming from actors tracked in Google's Threat Intelligence lists of Tor exit nodes." -> null
          - preview     = true -> null
          - priority    = 2147483645 -> null

          - match {
                # (1 unchanged attribute hidden)

              - expr {
                  - expression = "evaluateThreatIntelligence('iplist-tor-exit-nodes')" -> null
                }
            }
        }
      - rule {
          - action      = "deny(403)" -> null
          - description = "Block requests coming from actors tracked in Google's Threat Intelligence lists of known malicious IP addresses." -> null
          - preview     = true -> null
          - priority    = 2147483644 -> null

          - match {
                # (1 unchanged attribute hidden)

              - expr {
                  - expression = "evaluateThreatIntelligence('iplist-known-malicious-ips')" -> null
                }
            }
        }
      - rule {
          - action      = "deny(403)" -> null
          - description = "Block requests coming from actors tracked in Google's Threat Intelligence lists of proxies, crawlers and public clouds." -> null
          - preview     = true -> null
          - priority    = 2147483643 -> null

          - match {
                # (1 unchanged attribute hidden)

              - expr {
                  - expression = "evaluateThreatIntelligence('iplist-search-engines-crawlers') || evaluateThreatIntelligence('iplist-cloudflare') || evaluateThreatIntelligence('iplist-fastly') || evaluateThreatIntelligence('iplist-imperva') || evaluateThreatIntelligence('iplist-public-clouds')" -> null
                }
            }
        }
      - rule {
          - action      = "throttle" -> null
          - description = "Throttle GCP login requests from a single project to avoid it exhausting the entire IAM API read quota" -> null
          - preview     = false -> null
          - priority    = 10001 -> null

          - match {
                # (1 unchanged attribute hidden)

              - expr {
                  - expression = "request.path == '/v1/auth/gcp/login'" -> null
                }
            }

          - rate_limit_options {
              - ban_duration_sec    = 0 -> null
              - conform_action      = "allow" -> null
              - enforce_on_key      = "HTTP_HEADER" -> null
              - enforce_on_key_name = "X-Vault-Role" -> null
              - exceed_action       = "deny(429)" -> null

              - rate_limit_threshold {
                  - count        = 6000 -> null
                  - interval_sec = 60 -> null
                }
            }
        }
      - rule {
          - action      = "throttle" -> null
          - description = "Throttle GCP login requests to avoid overloading Vault" -> null
          - preview     = false -> null
          - priority    = 10000 -> null

          - match {
                # (1 unchanged attribute hidden)

              - expr {
                  - expression = "request.path == '/v1/auth/gcp/login'" -> null
                }
            }

          - rate_limit_options {
              - ban_duration_sec    = 0 -> null
              - conform_action      = "allow" -> null
              - enforce_on_key      = "ALL" -> null
              - exceed_action       = "deny(429)" -> null
                # (1 unchanged attribute hidden)

              - rate_limit_threshold {
                  - count        = 9000 -> null
                  - interval_sec = 30 -> null
                }
            }
        }
      + rule {
          + action      = "throttle"
          + description = "Throttle GCP login requests from a single project to avoid it exhausting the entire IAM API read quota"
          + preview     = false
          + priority    = 10001

          + match {
                # (1 unchanged attribute hidden)

              + expr {
                  + expression = "request.path == '/v1/auth/gcp/login'"
                }
            }

          + rate_limit_options {
              + conform_action      = "allow"
              + enforce_on_key      = "HTTP_HEADER"
              + enforce_on_key_name = "X-Vault-Role"
              + exceed_action       = "deny(429)"

              + rate_limit_threshold {
                  + count        = 6000
                  + interval_sec = 60
                }
            }
        }
      + rule {
          + action      = "throttle"
          + description = "Throttle GCP login requests to avoid overloading Vault"
          + preview     = false
          + priority    = 10000

          + match {
                # (1 unchanged attribute hidden)

              + expr {
                  + expression = "request.path == '/v1/auth/gcp/login'"
                }
            }

          + rate_limit_options {
              + conform_action = "allow"
              + enforce_on_key = "ALL"
              + exceed_action  = "deny(429)"

              + rate_limit_threshold {
                  + count        = 9000
                  + interval_sec = 30
                }
            }
        }

        # (5 unchanged blocks hidden)
    }

  # module.vault_common.module.storage_bucket_postgresql_credentials.google_storage_bucket.bucket will be updated in-place
  ~ resource "google_storage_bucket" "bucket" {
      ~ effective_labels            = {
          + "enforce-minimum-soft-delete"            = "true"
          + "gandalf-parent-protected-from-deletion" = "true"
          + "gandalf-protected-from-deletion"        = "true"
            # (1 unchanged element hidden)
        }
        id                          = "bsp-vault-postgresql-credentials"
      ~ labels                      = {
          + "enforce-minimum-soft-delete"            = "true"
          + "gandalf-parent-protected-from-deletion" = "true"
          + "gandalf-protected-from-deletion"        = "true"
            # (1 unchanged element hidden)
        }
        name                        = "bsp-vault-postgresql-credentials"
      ~ terraform_labels            = {
          + "enforce-minimum-soft-delete"            = "true"
          + "gandalf-parent-protected-from-deletion" = "true"
          + "gandalf-protected-from-deletion"        = "true"
            # (1 unchanged element hidden)
        }
        # (13 unchanged attributes hidden)

        # (2 unchanged blocks hidden)
    }

  # module.vault_common.module.storage_bucket_postgresql_credentials.google_tags_location_tag_binding.enforce_soft_delete[0] will be created
  + resource "google_tags_location_tag_binding" "enforce_soft_delete" {
      + id        = (known after apply)
      + location  = "US"
      + name      = (known after apply)
      + parent    = "//storage.googleapis.com/projects/_/buckets/bsp-vault-postgresql-credentials"
      + tag_value = "tagValues/281476445898187"
    }

  # module.vault_common.module.storage_bucket_sink[0].google_storage_bucket.bucket will be updated in-place
  ~ resource "google_storage_bucket" "bucket" {
      ~ effective_labels            = {
          + "enforce-minimum-soft-delete"            = "true"
          + "gandalf-parent-protected-from-deletion" = "true"
          + "gandalf-protected-from-deletion"        = "true"
            # (1 unchanged element hidden)
        }
        id                          = "bsp-vault-cloud-logging-sink"
      ~ labels                      = {
          + "enforce-minimum-soft-delete"            = "true"
          + "gandalf-parent-protected-from-deletion" = "true"
          + "gandalf-protected-from-deletion"        = "true"
            # (1 unchanged element hidden)
        }
        name                        = "bsp-vault-cloud-logging-sink"
      ~ terraform_labels            = {
          + "enforce-minimum-soft-delete"            = "true"
          + "gandalf-parent-protected-from-deletion" = "true"
          + "gandalf-protected-from-deletion"        = "true"
            # (1 unchanged element hidden)
        }
        # (13 unchanged attributes hidden)

        # (2 unchanged blocks hidden)
    }

  # module.vault_common.module.storage_bucket_sink[0].google_tags_location_tag_binding.enforce_soft_delete[0] will be created
  + resource "google_tags_location_tag_binding" "enforce_soft_delete" {
      + id        = (known after apply)
      + location  = "US"
      + name      = (known after apply)
      + parent    = "//storage.googleapis.com/projects/_/buckets/bsp-vault-cloud-logging-sink"
      + tag_value = "tagValues/281476445898187"
    }

  # module.vault_common.module.vault.google_compute_region_instance_group_manager.instance_group_manager[0] will be updated in-place
  ~ resource "google_compute_region_instance_group_manager" "instance_group_manager" {
        id                               = "vault-0/us-central1/vault"
        name                             = "vault"
        # (18 unchanged attributes hidden)

      ~ version {
          ~ instance_template = "https://www.googleapis.com/compute/v1/projects/vault-0/global/instanceTemplates/vault-20241021212309762900000001" -> (known after apply)
            name              = "0/2025-02-21 07:16:43.290093+00:00"
        }

        # (5 unchanged blocks hidden)
    }

  # module.vault_common.module.grafana_observability.module.gcp_logs_regional_group[0].google_compute_region_instance_group_manager.instance_group_manager[0] will be updated in-place
  ~ resource "google_compute_region_instance_group_manager" "instance_group_manager" {
        id                               = "projects/vault-0/regions/us-central1/instanceGroupManagers/grafana-gcp-logs"
        name                             = "grafana-gcp-logs"
        # (18 unchanged attributes hidden)

      ~ version {
          ~ instance_template = "https://www.googleapis.com/compute/v1/projects/vault-0/global/instanceTemplates/grafana-gcp-logs-20241204123035196500000001" -> (known after apply)
            name              = "0-1733326749180"
        }

        # (5 unchanged blocks hidden)
    }

  # module.vault_common.module.grafana_observability.module.gcp_metrics_zonal_group[0].google_compute_instance_group_manager.instance_group_manager[0] will be updated in-place
  ~ resource "google_compute_instance_group_manager" "instance_group_manager" {
        id                             = "projects/vault-0/zones/us-central1-a/instanceGroupManagers/grafana-gcp-metrics"
        name                           = "grafana-gcp-metrics"
        # (16 unchanged attributes hidden)

      ~ version {
          ~ instance_template = "https://www.googleapis.com/compute/v1/projects/vault-0/global/instanceTemplates/grafana-gcp-metrics-20241204123035469900000002" -> (known after apply)
            name              = "0-1733325689785"
        }

        # (5 unchanged blocks hidden)
    }

  # module.vault_common.module.vault.module.instance_template.google_compute_instance_template.instance_template must be replaced
+/- resource "google_compute_instance_template" "instance_template" {
      ~ id                   = "projects/vault-0/global/instanceTemplates/vault-20241021212309762900000001" -> (known after apply)
      ~ metadata             = { # forces replacement
          ~ "user-data"              = <<-EOT
                #cloud-config
                users:
                  - name: service
                    uid: 2000
                
                write_files:
                  # Set the Docker log driver to gcplogs. The other options are taken from COS's defaults.
                  - path: /etc/docker/daemon.json
                    content: |
                      {
                       "mtu": 1460,
                       "live-restore": true,
                       "log-driver": "json-file",
                       "log-opts": {
                         "max-file": "10",
                         "max-size": "100m"
                       },
                       "storage-driver": "overlay2"
                      }
                
                  - path: /etc/bsp/grafana-agent.yaml
                    content: |
                      server:
                        log_level: warn
                        log_format: json
                      
                      metrics:
                        wal_directory: /etc/agent/data/
                      
                        global:
                          scrape_interval: 60s
                          scrape_timeout: 30s
                      
                          external_labels:
                            project_id: "<PROJECT_ID>"
                            zone: "<ZONE>"
                            <<: <LABELS>
                      
                          remote_write:
                          - url: https://prometheus-us-central1.grafana.net/api/prom/push
                            basic_auth:
                              username: "1358357"
                              password: "<API_TOKEN>"
                        
                        configs:
                        - name: agent
                          wal_truncate_frequency: 30m
                          max_wal_time: 60m
                      
                          scrape_configs:
                          - job_name: "custom"
                            metrics_path: /v1/sys/metrics
                            scheme: https
                            tls_config:
                              insecure_skip_verify: true
                            static_configs:
                            - targets:
                              - localhost:8200
                            relabel_configs:
                            # ensure the `instance` label is always set with the instance name
                            # and not with the scrape target (`localhost:<port>`)
                            - action: replace
                              target_label: instance
                              replacement: "<INSTANCE>"
                      
                      
                          - job_name: "container"
                            static_configs:
                            - targets: ["localhost:8080"]
                            relabel_configs:
                            # ensure the `instance` label is always set with the instance name
                            # and not with the scrape target (`localhost:<port>`)
                            - action: replace
                              target_label: instance
                              replacement: "<INSTANCE>"
                            metric_relabel_configs:
                            # rename the name label in container_name
                            - action: replace
                              source_labels: [name]
                              target_label: container_name
                            - action: labeldrop
                              regex: name
                            # keep only metrics from containers with name, i.e., our containers
                            - action: keep
                              source_labels: [container_name]
                              regex: ".+"
                            # drop all containers label
                            - action: labeldrop
                              regex: "container_label_.+"
                            # keep only the metrics that we want to use
                            - action: keep
                              regex: "container_(cpu_load_average_10s|cpu_system_seconds_total|cpu_usage_seconds_total|cpu_user_seconds_total|fs_io_time_seconds_total|fs_reads_bytes_total|fs_read_seconds_total|fs_usage_bytes|fs_writes_bytes_total|last_seen|memory_max_usage_bytes|memory_usage_bytes|network_receive_bytes_total|network_transmit_bytes_total|network_transmit_packets_dropped_total|oom_events_total|spec_cpu_quota|spec_memory_limit_bytes|start_time_seconds)"
                              source_labels: [__name__]
                      
                          - job_name: "node"
                            static_configs:
                            - targets: ["localhost:9100"]
                            relabel_configs:
                            # ensure the `instance` label is always set with the instance name
                            # and not with the scrape target (`localhost:<port>`)
                            - action: replace
                              target_label: instance
                              replacement: "<INSTANCE>"
                            metric_relabel_configs:
                            # keep only the metrics that we want to use
                            - action: keep
                              regex: "node_(boot_time_seconds|cpu_seconds_total|disk_read_bytes_total|disk_written_bytes_total|exporter_build_info|filesystem_avail_bytes|filesystem_size_bytes|load1|load15|load5|memory_Buffers_bytes|memory_Cached_bytes|memory_MemFree_bytes|memory_MemTotal_bytes|memory_SwapCached_bytes|memory_SwapFree_bytes|memory_SwapTotal_bytes|network_receive_bytes_total|network_receive_drop_total|network_transmit_bytes_total|sockstat_TCP_alloc|sockstat_TCP_inuse|sockstat_TCP_mem|sockstat_TCP_mem_bytes|sockstat_TCP_orphan|sockstat_TCP_tw|time_seconds|uname_info)"
                              source_labels: [__name__]
                      
                      
                      integrations:
                        agent: # self-metrics
                          enabled: true
                          wal_truncate_frequency: 30m
                          relabel_configs:
                          - action: replace
                            source_labels: [agent_hostname]
                            target_label: instance
                          - action: labeldrop
                            regex: agent_hostname
                          - action: replace
                            target_label: job
                            replacement: "agent"
                          metric_relabel_configs:
                          # keep only specific self-metrics to reduce the cardinality
                          - action: keep
                            regex: (prometheus_target_.*|prometheus_sd_discovered_targets|agent_build.*|agent_wal_samples_appended_total|process_start_time_seconds)
                            source_labels: [__name__]
                          # rename the `integrations/agent` scrape job to `agent`
                          - action: replace
                            source_labels: [scrape_job]
                            regex: "integrations/agent"
                            target_label: scrape_job
                            replacement: "agent"
                      
                
                  - path: /etc/bsp/pre_run_script.sh
                    permissions: '0644'
                    owner: root
                    content: |
                      #!/bin/sh
              +       set -eu -o pipefail
                
                      # Allow the Vault Docker container to reach itself through the host IP address
                      # See https://cloud.google.com/container-optimized-os/docs/how-to/firewall
                      iptables --append INPUT --protocol tcp --src 172.17.0.0/16 --dport 8200 --jump ACCEPT
                      
                      # Disable the date parsing of fluentd (stackdriver-logging-agent), as it fails
                      # to parse the time field in Vault audit log entries and sets the timestamp
                      # to 01-01-1970. The logging agent needs to be restarted for the change to take effect.
                      sed -i 's/time_key time/time_key time_DISABLED/g' /etc/stackdriver/logging.config.d/fluentd-lakitu.conf
                      systemctl restart stackdriver-logging
                      
                
                  - path: /etc/systemd/system/pre_run_script.service
                    permissions: '0644'
                    owner: root
                    content: |
                      [Unit]
                      Description=Run commands before launching containers
                      Wants=gcr-online.target docker.service
                      After=gcr-online.target docker.service stackdriver-logging.service
                      [Service]
                      Type=oneshot
                      RemainAfterExit=yes
                      ExecStart=/bin/bash /etc/bsp/pre_run_script.sh
                
                  - path: /etc/systemd/system/cadvisor.service
                    permissions: '0644'
                    owner: root
                    content: |
                      [Unit]
                      Description=cadvisor service
                      Wants=gcr-online.target docker.service
                      After=gcr-online.target docker.service stackdriver-logging.service pre_run_script.service
                      StartLimitBurst=0
                      StartLimitIntervalSec=0
                      [Service]
                      Restart=on-failure
                      Environment="HOME=/etc/bsp/cadvisor"
                      ExecStartPre=/usr/bin/docker-credential-gcr configure-docker --registries us-docker.pkg.dev
                      ExecStart=/usr/bin/docker run --device /dev/kmsg --no-healthcheck --privileged --publish 8080:8080 --volume /:/rootfs:ro --volume /dev/disk/:/dev/disk:ro --volume /sys:/sys:ro --volume /var/lib/docker/:/var/lib/docker:ro --volume /var/run:/var/run:ro --name cadvisor us-docker.pkg.dev/en-registry/vault-docker/gcr.io/cadvisor/cadvisor:v0.45.0 --enable_metrics cpu,cpuLoad,disk,diskIO,memory,network,oom_event --logtostderr --port 8080
                      ExecStop=/usr/bin/docker stop -t 90 cadvisor
                      ExecStopPost=/usr/bin/docker rm cadvisor
                
                  - path: /etc/systemd/system/grafana-agent.service
                    permissions: '0644'
                    owner: root
                    content: |
                      [Unit]
                      Description=grafana-agent service
                      Wants=gcr-online.target docker.service
                      After=gcr-online.target docker.service stackdriver-logging.service pre_run_script.service grafana-agent-vault-bootstrap.service
                      StartLimitBurst=0
                      StartLimitIntervalSec=0
                      [Service]
                      Restart=on-failure
                      Environment="HOME=/etc/bsp/grafana-agent"
                      ExecStartPre=/usr/bin/docker-credential-gcr configure-docker --registries us-docker.pkg.dev
                      EnvironmentFile=/etc/bsp/metadata.env
                      EnvironmentFile=/home/vault/grafana-agent/.env
                      ExecStartPre=/bin/mkdir -p /var/grafana-agent/wal
                      ExecStartPre=/bin/sh -c '/bin/sed -i "s/<API_TOKEN>/$API_TOKEN/g" /etc/bsp/grafana-agent.yaml'
                      ExecStartPre=/bin/sh -c '/bin/sed -i "s/<INSTANCE>/$INSTANCE/g" /etc/bsp/grafana-agent.yaml'
                      ExecStartPre=/bin/sh -c '/bin/sed -i "s/<PROJECT_ID>/$PROJECT_ID/g" /etc/bsp/grafana-agent.yaml'
                      ExecStartPre=/bin/sh -c '/bin/sed -i "s/<ZONE>/$ZONE/g" /etc/bsp/grafana-agent.yaml'
                      ExecStartPre=/bin/sh -c '/bin/sed -i "s/<LABELS>/$LABELS/g" /etc/bsp/grafana-agent.yaml'
                      ExecStart=/usr/bin/docker run --network=host --publish 12345:12345 --volume /etc/bsp/grafana-agent.yaml:/etc/agent/agent.yaml --volume /var/grafana-agent/wal:/etc/agent/data --name grafana-agent us-docker.pkg.dev/en-registry/vault-docker/docker.io/grafana/agent:v0.40.4 -config.file=/etc/agent/agent.yaml -server.http.address=0.0.0.0:12345
                      ExecStop=/usr/bin/docker stop -t 90 grafana-agent
                      ExecStopPost=/usr/bin/docker rm grafana-agent
                
                  - path: /etc/systemd/system/grafana-agent-vault-bootstrap.service
                    permissions: '0644'
                    owner: root
                    content: |
                      [Unit]
                      Description=grafana-agent-vault-bootstrap service
                      Wants=gcr-online.target docker.service
                      After=gcr-online.target docker.service stackdriver-logging.service pre_run_script.service
                      StartLimitBurst=0
                      StartLimitIntervalSec=0
                      [Service]
                      Type=oneshot
                      Environment="HOME=/etc/bsp/grafana-agent-vault-bootstrap"
                      ExecStartPre=/usr/bin/docker-credential-gcr configure-docker --registries us-docker.pkg.dev
                      ExecStart=/usr/bin/docker run --env VAULT_PATHS=static2/shared/grafana-cloud/grafana-agent/manual --volume /home/vault/grafana-agent:/etc/vault --name grafana-agent-vault-bootstrap us-docker.pkg.dev/en-registry/vault-docker/vault-bootstrap:4.2.1
                      ExecStop=/usr/bin/docker stop -t 90 grafana-agent-vault-bootstrap
                      ExecStopPost=/usr/bin/docker rm grafana-agent-vault-bootstrap
                
                  - path: /etc/systemd/system/node-exporter.service
                    permissions: '0644'
                    owner: root
                    content: |
                      [Unit]
                      Description=node-exporter service
                      Wants=gcr-online.target docker.service
                      After=gcr-online.target docker.service stackdriver-logging.service pre_run_script.service
                      StartLimitBurst=0
                      StartLimitIntervalSec=0
                      [Service]
                      Restart=on-failure
                      Environment="HOME=/etc/bsp/node-exporter"
                      ExecStartPre=/usr/bin/docker-credential-gcr configure-docker --registries us-docker.pkg.dev
                      ExecStart=/usr/bin/docker run --network=host --pid=host --publish 9100:9100 --volume /:/host:ro,rslave --volume /etc/node-exporter/metrics-files:/etc/node-exporter/metrics-files --name node-exporter us-docker.pkg.dev/en-registry/vault-docker/docker.io/prom/node-exporter:v1.3.1 --collector.disable-defaults --collector.textfile.directory /etc/node-exporter/metrics-files --path.rootfs /host --web.listen-address :9100 --collector.cpu --collector.diskstats --collector.filesystem --collector.loadavg --collector.meminfo --collector.netclass --collector.netdev --collector.netstat --collector.os --collector.schedstat --collector.sockstat --collector.stat --collector.textfile --collector.time --collector.uname --collector.vmstat
                      ExecStop=/usr/bin/docker stop -t 90 node-exporter
                      ExecStopPost=/usr/bin/docker rm node-exporter
                
                  - path: /etc/systemd/system/vault.service
                    permissions: '0644'
                    owner: root
                    content: |
                      [Unit]
                      Description=vault service
                      Wants=gcr-online.target docker.service
                      After=gcr-online.target docker.service stackdriver-logging.service pre_run_script.service
                      StartLimitBurst=0
                      StartLimitIntervalSec=0
                      [Service]
                      Restart=on-failure
                      Environment="HOME=/etc/bsp/vault"
                      ExecStartPre=/usr/bin/docker-credential-gcr configure-docker --registries us-docker.pkg.dev
                      ExecStart=/usr/bin/docker run --cap-add=IPC_LOCK --publish 0.0.0.0:8200:8200/tcp --publish 0.0.0.0:8201:8201/tcp --name vault us-docker.pkg.dev/en-registry/vault-docker/vault:production --postgresql-credentials-bucket bsp-vault-postgresql-credentials/main --enable-ui true --api-addr https://vault.bendingspoons.com --use-tls true --enable-auto-unseal --auto-unseal-key-project-id vault-0 --auto-unseal-key-region global --auto-unseal-key-ring autounseal --auto-unseal-crypto-key-name autounseal --max-request-duration 52s --x-forwarded-for-authorized-addrs 130.211.0.0/22,35.191.0.0/16 --x-forwarded-for-hop-skips 1 --x-forwarded-for-reject-not-present false --x-forwarded-for-reject-not-authorized true
                      ExecStop=/usr/bin/docker stop -t 90 vault
                      ExecStopPost=/usr/bin/docker rm vault
                
                runcmd:
                  - iptables -A INPUT -p tcp -m tcp --dport 12345 -j ACCEPT
                  - iptables -A INPUT -p tcp -m tcp --dport 9100 -j ACCEPT
                  - |
                    mkdir -p /etc/bsp
                    cat <<EOF > /etc/bsp/metadata.env
              -     INSTANCE='$(basename $(curl --header 'Metadata-Flavor: Google' --silent http://metadata.google.internal/computeMetadata/v1/instance/name))'
              -     PROJECT_ID='$(basename $(curl --header 'Metadata-Flavor: Google' --silent http://metadata.google.internal/computeMetadata/v1/project/project-id))'
              -     ZONE='$(basename $(curl --header 'Metadata-Flavor: Google' --silent http://metadata.google.internal/computeMetadata/v1/instance/zone))'
              -     LABELS='$(curl --fail --header 'Metadata-Flavor: Google' --silent http://metadata.google.internal/computeMetadata/v1/instance/attributes/labels || echo '{}')'
              +     INSTANCE='$(basename $(curl -L --fail --header 'Metadata-Flavor: Google' --retry 5 --retry-max-time 30 --silent http://metadata.google.internal/computeMetadata/v1/instance/name))'
              +     PROJECT_ID='$(basename $(curl -L --fail --header 'Metadata-Flavor: Google' --retry 5 --retry-max-time 30 --silent http://metadata.google.internal/computeMetadata/v1/project/project-id))'
              +     ZONE='$(basename $(curl -L --fail --header 'Metadata-Flavor: Google' --retry 5 --retry-max-time 30 --silent http://metadata.google.internal/computeMetadata/v1/instance/zone))'
              +     LABELS='$(curl -L --fail --header 'Metadata-Flavor: Google' --silent http://metadata.google.internal/computeMetadata/v1/instance/attributes/labels || echo '{}')'
                    EOF
                  - systemctl daemon-reload
                  - systemctl restart docker
                  - systemctl start pre_run_script.service
                  - systemctl start cadvisor.service
                  - systemctl start grafana-agent.service
                  - systemctl start grafana-agent-vault-bootstrap.service
                  - systemctl start node-exporter.service
                  - systemctl start vault.service
                
                final_message: system configuration completed!
            EOT
            # (3 unchanged elements hidden)
        }
      ~ metadata_fingerprint = "RNFT2wFRKpI=" -> (known after apply)
      ~ name                 = "vault-20241021212309762900000001" -> (known after apply)
      ~ region               = "us-central1" -> (known after apply)
      ~ self_link            = "https://www.googleapis.com/compute/v1/projects/vault-0/global/instanceTemplates/vault-20241021212309762900000001" -> (known after apply)
      ~ self_link_unique     = "https://www.googleapis.com/compute/v1/projects/vault-0/global/instanceTemplates/vault-20241021212309762900000001?uniqueId=3134995597102905554" -> (known after apply)
        tags                 = [
            "monitoring",
            "vault",
        ]
      + tags_fingerprint     = (known after apply)
        # (10 unchanged attributes hidden)

      ~ confidential_instance_config (known after apply)

      ~ disk {
          ~ interface             = "SCSI" -> (known after apply)
          ~ provisioned_iops      = 0 -> (known after apply)
          - resource_manager_tags = {} -> null
          - resource_policies     = [] -> null
          ~ source_image          = "projects/cos-cloud/global/images/cos-105-17412-101-24" -> "cos-cloud/cos-117-18613-164-38" # forces replacement
          ~ type                  = "PERSISTENT" -> (known after apply)
            # (10 unchanged attributes hidden)
        }

      ~ network_interface {
          ~ internal_ipv6_prefix_length = 0 -> (known after apply)
          + ipv6_access_type            = (known after apply)
          + ipv6_address                = (known after apply)
          ~ name                        = "nic0" -> (known after apply)
          ~ network                     = "https://www.googleapis.com/compute/v1/projects/vault-0/global/networks/vault" -> (known after apply)
          - queue_count                 = 0 -> null
          + stack_type                  = (known after apply)
          ~ subnetwork_project          = "vault-0" -> (known after apply)
            # (3 unchanged attributes hidden)
        }

      ~ scheduling {
          - min_node_cpus               = 0 -> null
          ~ provisioning_model          = "STANDARD" -> (known after apply)
            # (4 unchanged attributes hidden)
        }

        # (2 unchanged blocks hidden)
    }

  # module.vault_common.module.grafana_observability.module.gcp_logs_regional_group[0].module.instance_template.google_compute_instance_template.instance_template must be replaced
+/- resource "google_compute_instance_template" "instance_template" {
      ~ id                   = "projects/vault-0/global/instanceTemplates/grafana-gcp-logs-20241204123035196500000001" -> (known after apply)
      ~ metadata             = { # forces replacement
          ~ "user-data"              = <<-EOT
                #cloud-config
                users:
                  - name: service
                    uid: 2000
                
                write_files:
                  # Set the Docker log driver to gcplogs. The other options are taken from COS's defaults.
                  - path: /etc/docker/daemon.json
                    content: |
                      {
                       "mtu": 1460,
                       "live-restore": true,
                       "log-driver": "json-file",
                       "log-opts": {
                         "max-file": "10",
                         "max-size": "100m"
                       },
                       "storage-driver": "overlay2"
                      }
                
                  - path: /etc/bsp/grafana-agent.yaml
                    content: |
                      server:
                        log_level: warn
                        log_format: json
                      
                      metrics:
                        wal_directory: /etc/agent/data/
                      
                        global:
                          scrape_interval: 60s
                          scrape_timeout: 30s
                      
                          external_labels:
                            project_id: "<PROJECT_ID>"
                            zone: "<ZONE>"
                            <<: <LABELS>
                      
                          remote_write:
                          - url: https://prometheus-us-central1.grafana.net/api/prom/push
                            basic_auth:
                              username: "1358357"
                              password: "<API_TOKEN>"
                        
                        configs:
                        - name: agent
                          wal_truncate_frequency: 30m
                          max_wal_time: 60m
                      
                          scrape_configs:
                          - job_name: "custom"
                            metrics_path: /-/metrics
                            scheme: http
                            static_configs:
                            - targets:
                              - localhost:5001
                            relabel_configs:
                            # ensure the `instance` label is always set with the instance name
                            # and not with the scrape target (`localhost:<port>`)
                            - action: replace
                              target_label: instance
                              replacement: "<INSTANCE>"
                      
                      
                          - job_name: "container"
                            static_configs:
                            - targets: ["localhost:8080"]
                            relabel_configs:
                            # ensure the `instance` label is always set with the instance name
                            # and not with the scrape target (`localhost:<port>`)
                            - action: replace
                              target_label: instance
                              replacement: "<INSTANCE>"
                            metric_relabel_configs:
                            # rename the name label in container_name
                            - action: replace
                              source_labels: [name]
                              target_label: container_name
                            - action: labeldrop
                              regex: name
                            # keep only metrics from containers with name, i.e., our containers
                            - action: keep
                              source_labels: [container_name]
                              regex: ".+"
                            # drop all containers label
                            - action: labeldrop
                              regex: "container_label_.+"
                            # keep only the metrics that we want to use
                            - action: keep
                              regex: "container_(cpu_load_average_10s|cpu_system_seconds_total|cpu_usage_seconds_total|cpu_user_seconds_total|fs_io_time_seconds_total|fs_reads_bytes_total|fs_read_seconds_total|fs_usage_bytes|fs_writes_bytes_total|last_seen|memory_max_usage_bytes|memory_usage_bytes|network_receive_bytes_total|network_transmit_bytes_total|network_transmit_packets_dropped_total|oom_events_total|spec_cpu_quota|spec_memory_limit_bytes|start_time_seconds)"
                              source_labels: [__name__]
                      
                          - job_name: "node"
                            static_configs:
                            - targets: ["localhost:9100"]
                            relabel_configs:
                            # ensure the `instance` label is always set with the instance name
                            # and not with the scrape target (`localhost:<port>`)
                            - action: replace
                              target_label: instance
                              replacement: "<INSTANCE>"
                            metric_relabel_configs:
                            # keep only the metrics that we want to use
                            - action: keep
                              regex: "node_(boot_time_seconds|cpu_seconds_total|disk_read_bytes_total|disk_written_bytes_total|exporter_build_info|filesystem_avail_bytes|filesystem_size_bytes|load1|load15|load5|memory_Buffers_bytes|memory_Cached_bytes|memory_MemFree_bytes|memory_MemTotal_bytes|memory_SwapCached_bytes|memory_SwapFree_bytes|memory_SwapTotal_bytes|network_receive_bytes_total|network_receive_drop_total|network_transmit_bytes_total|sockstat_TCP_alloc|sockstat_TCP_inuse|sockstat_TCP_mem|sockstat_TCP_mem_bytes|sockstat_TCP_orphan|sockstat_TCP_tw|time_seconds|uname_info)"
                              source_labels: [__name__]
                      
                      logs:
                        positions_directory: /etc/agent/data
                        global:
                          clients:
                          - url: https://logs-prod-017.grafana.net/loki/api/v1/push
                            basic_auth:
                              username: "778205"
                              password: "<API_TOKEN>"
                        configs:
                          - "name": "gcp_logs"
                            "scrape_configs":
                            - "gcplog":
                                "labels":
                                  "job": "cloud_logging"
                                  "project_id": "vault-0"
                                "project_id": "vault-0"
                                "subscription": "grafana-gcp-logs"
                                "subscription_type": "pull"
                                "use_full_line": true
                                "use_incoming_timestamp": true
                              "job_name": "cloud_logging"
                              "pipeline_stages":
                              - "json":
                                  "expressions":
                                    "log_stream": "jsonPayload.\"cos.googleapis.com/stream\""
                                    "payload_namespace": "jsonPayload.involvedObject.namespace"
                                    "severity": "severity"
                              - "labels":
                                  "log_stream": "log_stream"
                                  "namespace": "payload_namespace"
                                  "severity": "severity"
                              - "match":
                                  "selector": "{log_stream=\"stderr\",severity=\"\"}"
                                  "stages":
                                  - "static_labels":
                                      "level": "ERROR"
                                  - "labeldrop":
                                    - "log_stream"
                                    - "severity"
                              "relabel_configs":
                              - "source_labels":
                                - "__gcp_resource_type"
                                "target_label": "resource_type"
                              - "source_labels":
                                - "__gcp_severity"
                                "target_label": "level"
                              - "source_labels":
                                - "__gcp_resource_labels_project_id"
                                "target_label": "resource_project_id"
                              - "source_labels":
                                - "__gcp_labels_compute_googleapis_com_resource_name"
                                "target_label": "instance"
                              - "source_labels":
                                - "__gcp_resource_labels_zone"
                                "target_label": "zone"
                              - "source_labels":
                                - "__gcp_resource_labels_cluster_name"
                                "target_label": "cluster"
                              - "source_labels":
                                - "__gcp_resource_labels_container_name"
                                "target_label": "container"
                              - "source_labels":
                                - "__gcp_resource_labels_location"
                                "target_label": "region"
                              - "source_labels":
                                - "__gcp_resource_labels_namespace_name"
                                "target_label": "namespace"
                          
                      integrations:
                        agent: # self-metrics
                          enabled: true
                          wal_truncate_frequency: 30m
                          relabel_configs:
                          - action: replace
                            source_labels: [agent_hostname]
                            target_label: instance
                          - action: labeldrop
                            regex: agent_hostname
                          - action: replace
                            target_label: job
                            replacement: "agent"
                          metric_relabel_configs:
                          # keep only specific self-metrics to reduce the cardinality
                          - action: keep
                            regex: (prometheus_target_.*|prometheus_sd_discovered_targets|agent_build.*|agent_wal_samples_appended_total|process_start_time_seconds)
                            source_labels: [__name__]
                          # rename the `integrations/agent` scrape job to `agent`
                          - action: replace
                            source_labels: [scrape_job]
                            regex: "integrations/agent"
                            target_label: scrape_job
                            replacement: "agent"
                      
                
                  - path: /etc/systemd/system/cadvisor.service
                    permissions: '0644'
                    owner: root
                    content: |
                      [Unit]
                      Description=cadvisor service
                      Wants=gcr-online.target docker.service
                      After=gcr-online.target docker.service stackdriver-logging.service
                      StartLimitBurst=0
                      StartLimitIntervalSec=0
                      [Service]
                      Restart=on-failure
                      Environment="HOME=/etc/bsp/cadvisor"
                      ExecStartPre=/usr/bin/docker-credential-gcr configure-docker --registries us-docker.pkg.dev
                      ExecStart=/usr/bin/docker run --device /dev/kmsg --no-healthcheck --privileged --publish 8080:8080 --volume /:/rootfs:ro --volume /dev/disk/:/dev/disk:ro --volume /sys:/sys:ro --volume /var/lib/docker/:/var/lib/docker:ro --volume /var/run:/var/run:ro --name cadvisor us-docker.pkg.dev/en-registry/vault-docker/gcr.io/cadvisor/cadvisor:v0.45.0 --enable_metrics cpu,cpuLoad,disk,diskIO,memory,network,oom_event --logtostderr --port 8080
                      ExecStop=/usr/bin/docker stop -t 90 cadvisor
                      ExecStopPost=/usr/bin/docker rm cadvisor
                
                  - path: /etc/systemd/system/grafana-agent.service
                    permissions: '0644'
                    owner: root
                    content: |
                      [Unit]
                      Description=grafana-agent service
                      Wants=gcr-online.target docker.service
                      After=gcr-online.target docker.service stackdriver-logging.service grafana-agent-vault-bootstrap.service
                      StartLimitBurst=0
                      StartLimitIntervalSec=0
                      [Service]
                      Restart=on-failure
                      Environment="HOME=/etc/bsp/grafana-agent"
                      ExecStartPre=/usr/bin/docker-credential-gcr configure-docker --registries us-docker.pkg.dev
                      EnvironmentFile=/etc/bsp/metadata.env
                      EnvironmentFile=/home/vault/grafana-agent/.env
                      ExecStartPre=/bin/mkdir -p /var/grafana-agent/wal
                      ExecStartPre=/bin/sh -c '/bin/sed -i "s/<API_TOKEN>/$API_TOKEN/g" /etc/bsp/grafana-agent.yaml'
                      ExecStartPre=/bin/sh -c '/bin/sed -i "s/<INSTANCE>/$INSTANCE/g" /etc/bsp/grafana-agent.yaml'
                      ExecStartPre=/bin/sh -c '/bin/sed -i "s/<PROJECT_ID>/$PROJECT_ID/g" /etc/bsp/grafana-agent.yaml'
                      ExecStartPre=/bin/sh -c '/bin/sed -i "s/<ZONE>/$ZONE/g" /etc/bsp/grafana-agent.yaml'
                      ExecStartPre=/bin/sh -c '/bin/sed -i "s/<LABELS>/$LABELS/g" /etc/bsp/grafana-agent.yaml'
              -       ExecStart=/usr/bin/docker run --network=host --publish 12345:12345 --volume /etc/bsp/grafana-agent.yaml:/etc/agent/agent.yaml --volume /var/grafana-agent/wal:/etc/agent/data --name grafana-agent us-docker.pkg.dev/en-registry/vault-docker/docker.io/grafana/agent:v0.40.4 -config.file=/etc/agent/agent.yaml -server.http.address=0.0.0.0:12345
              +       ExecStart=/usr/bin/docker run --network=host --publish 12345:12345 --volume /etc/bsp/grafana-agent.yaml:/etc/agent/agent.yaml --volume /var/grafana-agent/wal:/etc/agent/data --name grafana-agent us-docker.pkg.dev/en-registry/vault-docker/docker.io/grafana/agent:v0.43.4 -config.file=/etc/agent/agent.yaml -server.http.address=0.0.0.0:12345
                      ExecStop=/usr/bin/docker stop -t 90 grafana-agent
                      ExecStopPost=/usr/bin/docker rm grafana-agent
                
                  - path: /etc/systemd/system/grafana-agent-vault-bootstrap.service
                    permissions: '0644'
                    owner: root
                    content: |
                      [Unit]
                      Description=grafana-agent-vault-bootstrap service
                      Wants=gcr-online.target docker.service
                      After=gcr-online.target docker.service stackdriver-logging.service
                      StartLimitBurst=0
                      StartLimitIntervalSec=0
                      [Service]
                      Type=oneshot
                      Environment="HOME=/etc/bsp/grafana-agent-vault-bootstrap"
                      ExecStartPre=/usr/bin/docker-credential-gcr configure-docker --registries us-docker.pkg.dev
                      ExecStart=/usr/bin/docker run --env VAULT_PATHS=static2/shared/grafana-cloud/grafana-agent/manual --volume /home/vault/grafana-agent:/etc/vault --name grafana-agent-vault-bootstrap us-docker.pkg.dev/en-registry/vault-docker/vault-bootstrap:4.2.1
                      ExecStop=/usr/bin/docker stop -t 90 grafana-agent-vault-bootstrap
                      ExecStopPost=/usr/bin/docker rm grafana-agent-vault-bootstrap
                
                  - path: /etc/systemd/system/node-exporter.service
                    permissions: '0644'
                    owner: root
                    content: |
                      [Unit]
                      Description=node-exporter service
                      Wants=gcr-online.target docker.service
                      After=gcr-online.target docker.service stackdriver-logging.service
                      StartLimitBurst=0
                      StartLimitIntervalSec=0
                      [Service]
                      Restart=on-failure
                      Environment="HOME=/etc/bsp/node-exporter"
                      ExecStartPre=/usr/bin/docker-credential-gcr configure-docker --registries us-docker.pkg.dev
                      ExecStart=/usr/bin/docker run --network=host --pid=host --publish 9100:9100 --volume /:/host:ro,rslave --volume /etc/node-exporter/metrics-files:/etc/node-exporter/metrics-files --name node-exporter us-docker.pkg.dev/en-registry/vault-docker/docker.io/prom/node-exporter:v1.3.1 --collector.disable-defaults --collector.textfile.directory /etc/node-exporter/metrics-files --path.rootfs /host --web.listen-address :9100 --collector.cpu --collector.diskstats --collector.filesystem --collector.loadavg --collector.meminfo --collector.netclass --collector.netdev --collector.netstat --collector.os --collector.schedstat --collector.sockstat --collector.stat --collector.textfile --collector.time --collector.uname --collector.vmstat
                      ExecStop=/usr/bin/docker stop -t 90 node-exporter
                      ExecStopPost=/usr/bin/docker rm node-exporter
                
                runcmd:
                  - iptables -A INPUT -p tcp -m tcp --dport 12345 -j ACCEPT
                  - iptables -A INPUT -p tcp -m tcp --dport 9100 -j ACCEPT
                  - |
                    mkdir -p /etc/bsp
                    cat <<EOF > /etc/bsp/metadata.env
                    INSTANCE='$(basename $(curl -L --fail --header 'Metadata-Flavor: Google' --retry 5 --retry-max-time 30 --silent http://metadata.google.internal/computeMetadata/v1/instance/name))'
                    PROJECT_ID='$(basename $(curl -L --fail --header 'Metadata-Flavor: Google' --retry 5 --retry-max-time 30 --silent http://metadata.google.internal/computeMetadata/v1/project/project-id))'
                    ZONE='$(basename $(curl -L --fail --header 'Metadata-Flavor: Google' --retry 5 --retry-max-time 30 --silent http://metadata.google.internal/computeMetadata/v1/instance/zone))'
                    LABELS='$(curl -L --fail --header 'Metadata-Flavor: Google' --silent http://metadata.google.internal/computeMetadata/v1/instance/attributes/labels || echo '{}')'
                    EOF
                  - systemctl daemon-reload
                  - systemctl restart docker
                  - systemctl start cadvisor.service
                  - systemctl start grafana-agent.service
                  - systemctl start grafana-agent-vault-bootstrap.service
                  - systemctl start node-exporter.service
                
                final_message: system configuration completed!
            EOT
            # (3 unchanged elements hidden)
        }
      ~ metadata_fingerprint = "QNY-cVaPvfQ=" -> (known after apply)
      ~ name                 = "grafana-gcp-logs-20241204123035196500000001" -> (known after apply)
      ~ region               = "us-central1" -> (known after apply)
      ~ self_link            = "https://www.googleapis.com/compute/v1/projects/vault-0/global/instanceTemplates/grafana-gcp-logs-20241204123035196500000001" -> (known after apply)
      ~ self_link_unique     = "https://www.googleapis.com/compute/v1/projects/vault-0/global/instanceTemplates/grafana-gcp-logs-20241204123035196500000001?uniqueId=1289953156565693828" -> (known after apply)
        tags                 = [
            "grafana-gcp-logs",
        ]
      + tags_fingerprint     = (known after apply)
        # (10 unchanged attributes hidden)

      ~ confidential_instance_config (known after apply)

      ~ disk {
          ~ interface             = "SCSI" -> (known after apply)
          ~ provisioned_iops      = 0 -> (known after apply)
          - resource_manager_tags = {} -> null
          - resource_policies     = [] -> null
          ~ source_image          = "projects/cos-cloud/global/images/cos-105-17412-101-24" -> "cos-cloud/cos-117-18613-164-38" # forces replacement
          ~ type                  = "PERSISTENT" -> (known after apply)
            # (10 unchanged attributes hidden)
        }

      ~ network_interface {
          ~ internal_ipv6_prefix_length = 0 -> (known after apply)
          + ipv6_access_type            = (known after apply)
          + ipv6_address                = (known after apply)
          ~ name                        = "nic0" -> (known after apply)
          ~ network                     = "https://www.googleapis.com/compute/v1/projects/vault-0/global/networks/grafana-observability" -> (known after apply)
          - queue_count                 = 0 -> null
          + stack_type                  = (known after apply)
          ~ subnetwork_project          = "vault-0" -> (known after apply)
            # (3 unchanged attributes hidden)
        }

      ~ scheduling {
          - min_node_cpus               = 0 -> null
          ~ provisioning_model          = "STANDARD" -> (known after apply)
            # (4 unchanged attributes hidden)
        }

        # (2 unchanged blocks hidden)
    }

  # module.vault_common.module.grafana_observability.module.gcp_metrics_zonal_group[0].module.instance_template.google_compute_instance_template.instance_template must be replaced
+/- resource "google_compute_instance_template" "instance_template" {
      ~ id                   = "projects/vault-0/global/instanceTemplates/grafana-gcp-metrics-20241204123035469900000002" -> (known after apply)
      ~ metadata             = { # forces replacement
          ~ "user-data"              = <<-EOT
                #cloud-config
                users:
                  - name: service
                    uid: 2000
                
                write_files:
                  # Set the Docker log driver to gcplogs. The other options are taken from COS's defaults.
                  - path: /etc/docker/daemon.json
                    content: |
                      {
                       "mtu": 1460,
                       "live-restore": true,
                       "log-driver": "json-file",
                       "log-opts": {
                         "max-file": "10",
                         "max-size": "100m"
                       },
                       "storage-driver": "overlay2"
                      }
                
                  - path: /etc/bsp/grafana-agent.yaml
                    content: |
                      server:
                        log_level: warn
                        log_format: json
                      
                      metrics:
                        wal_directory: /etc/agent/data/
                      
                        global:
                          scrape_interval: 60s
                          scrape_timeout: 30s
                      
                          external_labels:
                            project_id: "<PROJECT_ID>"
                            zone: "<ZONE>"
                            <<: <LABELS>
                      
                          remote_write:
                          - url: https://prometheus-us-central1.grafana.net/api/prom/push
                            basic_auth:
                              username: "1358357"
                              password: "<API_TOKEN>"
                            write_relabel_configs:
                            - "regex": "gcp;.+"
                              "replacement": ""
                              "source_labels":
                              - "job"
                              - "component"
                              "target_label": "component"
                            - "regex": "gcp;.+"
                              "replacement": ""
                              "source_labels":
                              - "job"
                              - "grafana_component"
                              "target_label": "grafana_component"
                            - "regex": "gcp;.+"
                              "replacement": ""
                              "source_labels":
                              - "job"
                              - "tool"
                              "target_label": "tool"
                            - "regex": "gcp;.+"
                              "replacement": ""
                              "source_labels":
                              - "job"
                              - "instance"
                              "target_label": "instance"
                            - "regex": "gcp;.+"
                              "replacement": ""
                              "source_labels":
                              - "job"
                              - "zone"
                              "target_label": "zone"
                            
                        
                        configs:
                        - name: agent
                          wal_truncate_frequency: 30m
                          max_wal_time: 60m
                      
                          scrape_configs:
                          - job_name: "custom"
                            metrics_path: /-/metrics
                            scheme: http
                            static_configs:
                            - targets:
                              - localhost:5001
                            relabel_configs:
                            # ensure the `instance` label is always set with the instance name
                            # and not with the scrape target (`localhost:<port>`)
                            - action: replace
                              target_label: instance
                              replacement: "<INSTANCE>"
                      
                      
                          - job_name: "container"
                            static_configs:
                            - targets: ["localhost:8080"]
                            relabel_configs:
                            # ensure the `instance` label is always set with the instance name
                            # and not with the scrape target (`localhost:<port>`)
                            - action: replace
                              target_label: instance
                              replacement: "<INSTANCE>"
                            metric_relabel_configs:
                            # rename the name label in container_name
                            - action: replace
                              source_labels: [name]
                              target_label: container_name
                            - action: labeldrop
                              regex: name
                            # keep only metrics from containers with name, i.e., our containers
                            - action: keep
                              source_labels: [container_name]
                              regex: ".+"
                            # drop all containers label
                            - action: labeldrop
                              regex: "container_label_.+"
                            # keep only the metrics that we want to use
                            - action: keep
                              regex: "container_(cpu_load_average_10s|cpu_system_seconds_total|cpu_usage_seconds_total|cpu_user_seconds_total|fs_io_time_seconds_total|fs_reads_bytes_total|fs_read_seconds_total|fs_usage_bytes|fs_writes_bytes_total|last_seen|memory_max_usage_bytes|memory_usage_bytes|network_receive_bytes_total|network_transmit_bytes_total|network_transmit_packets_dropped_total|oom_events_total|spec_cpu_quota|spec_memory_limit_bytes|start_time_seconds)"
                              source_labels: [__name__]
                      
                          - job_name: "node"
                            static_configs:
                            - targets: ["localhost:9100"]
                            relabel_configs:
                            # ensure the `instance` label is always set with the instance name
                            # and not with the scrape target (`localhost:<port>`)
                            - action: replace
                              target_label: instance
                              replacement: "<INSTANCE>"
                            metric_relabel_configs:
                            # keep only the metrics that we want to use
                            - action: keep
                              regex: "node_(boot_time_seconds|cpu_seconds_total|disk_read_bytes_total|disk_written_bytes_total|exporter_build_info|filesystem_avail_bytes|filesystem_size_bytes|load1|load15|load5|memory_Buffers_bytes|memory_Cached_bytes|memory_MemFree_bytes|memory_MemTotal_bytes|memory_SwapCached_bytes|memory_SwapFree_bytes|memory_SwapTotal_bytes|network_receive_bytes_total|network_receive_drop_total|network_transmit_bytes_total|sockstat_TCP_alloc|sockstat_TCP_inuse|sockstat_TCP_mem|sockstat_TCP_mem_bytes|sockstat_TCP_orphan|sockstat_TCP_tw|time_seconds|uname_info)"
                              source_labels: [__name__]
                      
                      
                      integrations:
                        agent: # self-metrics
                          enabled: true
                          wal_truncate_frequency: 30m
                          relabel_configs:
                          - action: replace
                            source_labels: [agent_hostname]
                            target_label: instance
                          - action: labeldrop
                            regex: agent_hostname
                          - action: replace
                            target_label: job
                            replacement: "agent"
                          metric_relabel_configs:
                          # keep only specific self-metrics to reduce the cardinality
                          - action: keep
                            regex: (prometheus_target_.*|prometheus_sd_discovered_targets|agent_build.*|agent_wal_samples_appended_total|process_start_time_seconds)
                            source_labels: [__name__]
                          # rename the `integrations/agent` scrape job to `agent`
                          - action: replace
                            source_labels: [scrape_job]
                            regex: "integrations/agent"
                            target_label: scrape_job
                            replacement: "agent"
                        "gcp_exporter":
                          "enabled": true
                          "gcp_client_timeout": "30s"
                          "ingest_delay": false
                          "metric_relabel_configs":
                          - "action": "replace"
                            "regex": "stackdriver_(.+)_[^_]+_googleapis_com_.+"
                            "replacement": "${1}"
                            "source_labels":
                            - "__name__"
                            "target_label": "gcp_resource_type"
                          - "action": "replace"
                            "regex": "stackdriver_.+_([^_]+)_googleapis_com_(.+)"
                            "replacement": "gcp_${1}_${2}"
                            "source_labels":
                            - "__name__"
                            "target_label": "__name__"
                          - "action": "replace"
                            "regex": "integrations/gcp_exporter"
                            "replacement": "gcp"
                            "source_labels":
                            - "scrape_job"
                            "target_label": "scrape_job"
                          - "source_labels":
                            - "component"
                            "target_label": "gcp_component"
                          - "source_labels":
                            - "grafana_component"
                            "target_label": "gcp_grafana_component"
                          - "source_labels":
                            - "tool"
                            "target_label": "gcp_tool"
                          "metrics_prefixes":
                          - "bigquery.googleapis.com/job/num_in_flight"
                          - "bigquery.googleapis.com/query/execution_times"
                          - "bigquery.googleapis.com/slots"
                          - "cloudsql.googleapis.com/database"
                          - "compute.googleapis.com/firewall/dropped_packets_count"
                          - "compute.googleapis.com/instance/cpu/reserved_cores"
                          - "compute.googleapis.com/instance_group/size"
                          - "compute.googleapis.com/nat"
                          - "loadbalancing.googleapis.com/https/backend_latencies"
                          - "loadbalancing.googleapis.com/https/backend_response_bytes_count"
                          - "loadbalancing.googleapis.com/https/backend_request_count"
                          - "loadbalancing.googleapis.com/https/backend_request_bytes_count"
                          - "loadbalancing.googleapis.com/https/frontend_tcp_rtt"
                          - "loadbalancing.googleapis.com/https/internal"
                          - "loadbalancing.googleapis.com/https/request_count"
                          - "loadbalancing.googleapis.com/https/response_bytes_count"
                          - "loadbalancing.googleapis.com/https/total_latencies"
                          - "logging.googleapis.com/billing/bytes_ingested"
                          - "logging.googleapis.com/byte_count"
                          - "logging.googleapis.com/log_entry_count"
                          - "logging.googleapis.com/user"
                          - "storage.googleapis.com/api/request_count"
                          - "storage.googleapis.com/network"
                          - "storage.googleapis.com/storage"
                          - "compute.googleapis.com/nat/dropped_sent_packets_count"
                          - "pubsub.googleapis.com/subscription/oldest_unacked_message_age"
                          "project_ids":
                          - "vault-0"
                          "relabel_configs":
                          - "action": "labeldrop"
                            "regex": "agent_hostname"
                          - "action": "replace"
                            "replacement": "gcp"
                            "target_label": "job"
                          "request_interval": "5m"
                          "wal_truncate_frequency": "30m"
                        
                      
                
                  - path: /etc/systemd/system/cadvisor.service
                    permissions: '0644'
                    owner: root
                    content: |
                      [Unit]
                      Description=cadvisor service
                      Wants=gcr-online.target docker.service
                      After=gcr-online.target docker.service stackdriver-logging.service
                      StartLimitBurst=0
                      StartLimitIntervalSec=0
                      [Service]
                      Restart=on-failure
                      Environment="HOME=/etc/bsp/cadvisor"
                      ExecStartPre=/usr/bin/docker-credential-gcr configure-docker --registries us-docker.pkg.dev
                      ExecStart=/usr/bin/docker run --device /dev/kmsg --no-healthcheck --privileged --publish 8080:8080 --volume /:/rootfs:ro --volume /dev/disk/:/dev/disk:ro --volume /sys:/sys:ro --volume /var/lib/docker/:/var/lib/docker:ro --volume /var/run:/var/run:ro --name cadvisor us-docker.pkg.dev/en-registry/vault-docker/gcr.io/cadvisor/cadvisor:v0.45.0 --enable_metrics cpu,cpuLoad,disk,diskIO,memory,network,oom_event --logtostderr --port 8080
                      ExecStop=/usr/bin/docker stop -t 90 cadvisor
                      ExecStopPost=/usr/bin/docker rm cadvisor
                
                  - path: /etc/systemd/system/grafana-agent.service
                    permissions: '0644'
                    owner: root
                    content: |
                      [Unit]
                      Description=grafana-agent service
                      Wants=gcr-online.target docker.service
                      After=gcr-online.target docker.service stackdriver-logging.service grafana-agent-vault-bootstrap.service
                      StartLimitBurst=0
                      StartLimitIntervalSec=0
                      [Service]
                      Restart=on-failure
                      Environment="HOME=/etc/bsp/grafana-agent"
                      ExecStartPre=/usr/bin/docker-credential-gcr configure-docker --registries us-docker.pkg.dev
                      EnvironmentFile=/etc/bsp/metadata.env
                      EnvironmentFile=/home/vault/grafana-agent/.env
                      ExecStartPre=/bin/mkdir -p /var/grafana-agent/wal
                      ExecStartPre=/bin/sh -c '/bin/sed -i "s/<API_TOKEN>/$API_TOKEN/g" /etc/bsp/grafana-agent.yaml'
                      ExecStartPre=/bin/sh -c '/bin/sed -i "s/<INSTANCE>/$INSTANCE/g" /etc/bsp/grafana-agent.yaml'
                      ExecStartPre=/bin/sh -c '/bin/sed -i "s/<PROJECT_ID>/$PROJECT_ID/g" /etc/bsp/grafana-agent.yaml'
                      ExecStartPre=/bin/sh -c '/bin/sed -i "s/<ZONE>/$ZONE/g" /etc/bsp/grafana-agent.yaml'
                      ExecStartPre=/bin/sh -c '/bin/sed -i "s/<LABELS>/$LABELS/g" /etc/bsp/grafana-agent.yaml'
              -       ExecStart=/usr/bin/docker run --network=host --publish 12345:12345 --volume /etc/bsp/grafana-agent.yaml:/etc/agent/agent.yaml --volume /var/grafana-agent/wal:/etc/agent/data --name grafana-agent us-docker.pkg.dev/en-registry/vault-docker/docker.io/grafana/agent:v0.40.4 -config.file=/etc/agent/agent.yaml -server.http.address=0.0.0.0:12345
              +       ExecStart=/usr/bin/docker run --network=host --publish 12345:12345 --volume /etc/bsp/grafana-agent.yaml:/etc/agent/agent.yaml --volume /var/grafana-agent/wal:/etc/agent/data --name grafana-agent us-docker.pkg.dev/en-registry/vault-docker/docker.io/grafana/agent:v0.43.4 -config.file=/etc/agent/agent.yaml -server.http.address=0.0.0.0:12345
                      ExecStop=/usr/bin/docker stop -t 90 grafana-agent
                      ExecStopPost=/usr/bin/docker rm grafana-agent
                
                  - path: /etc/systemd/system/grafana-agent-vault-bootstrap.service
                    permissions: '0644'
                    owner: root
                    content: |
                      [Unit]
                      Description=grafana-agent-vault-bootstrap service
                      Wants=gcr-online.target docker.service
                      After=gcr-online.target docker.service stackdriver-logging.service
                      StartLimitBurst=0
                      StartLimitIntervalSec=0
                      [Service]
                      Type=oneshot
                      Environment="HOME=/etc/bsp/grafana-agent-vault-bootstrap"
                      ExecStartPre=/usr/bin/docker-credential-gcr configure-docker --registries us-docker.pkg.dev
                      ExecStart=/usr/bin/docker run --env VAULT_PATHS=static2/shared/grafana-cloud/grafana-agent/manual --volume /home/vault/grafana-agent:/etc/vault --name grafana-agent-vault-bootstrap us-docker.pkg.dev/en-registry/vault-docker/vault-bootstrap:4.2.1
                      ExecStop=/usr/bin/docker stop -t 90 grafana-agent-vault-bootstrap
                      ExecStopPost=/usr/bin/docker rm grafana-agent-vault-bootstrap
                
                  - path: /etc/systemd/system/node-exporter.service
                    permissions: '0644'
                    owner: root
                    content: |
                      [Unit]
                      Description=node-exporter service
                      Wants=gcr-online.target docker.service
                      After=gcr-online.target docker.service stackdriver-logging.service
                      StartLimitBurst=0
                      StartLimitIntervalSec=0
                      [Service]
                      Restart=on-failure
                      Environment="HOME=/etc/bsp/node-exporter"
                      ExecStartPre=/usr/bin/docker-credential-gcr configure-docker --registries us-docker.pkg.dev
                      ExecStart=/usr/bin/docker run --network=host --pid=host --publish 9100:9100 --volume /:/host:ro,rslave --volume /etc/node-exporter/metrics-files:/etc/node-exporter/metrics-files --name node-exporter us-docker.pkg.dev/en-registry/vault-docker/docker.io/prom/node-exporter:v1.3.1 --collector.disable-defaults --collector.textfile.directory /etc/node-exporter/metrics-files --path.rootfs /host --web.listen-address :9100 --collector.cpu --collector.diskstats --collector.filesystem --collector.loadavg --collector.meminfo --collector.netclass --collector.netdev --collector.netstat --collector.os --collector.schedstat --collector.sockstat --collector.stat --collector.textfile --collector.time --collector.uname --collector.vmstat
                      ExecStop=/usr/bin/docker stop -t 90 node-exporter
                      ExecStopPost=/usr/bin/docker rm node-exporter
                
                runcmd:
                  - iptables -A INPUT -p tcp -m tcp --dport 12345 -j ACCEPT
                  - iptables -A INPUT -p tcp -m tcp --dport 9100 -j ACCEPT
                  - |
                    mkdir -p /etc/bsp
                    cat <<EOF > /etc/bsp/metadata.env
                    INSTANCE='$(basename $(curl -L --fail --header 'Metadata-Flavor: Google' --retry 5 --retry-max-time 30 --silent http://metadata.google.internal/computeMetadata/v1/instance/name))'
                    PROJECT_ID='$(basename $(curl -L --fail --header 'Metadata-Flavor: Google' --retry 5 --retry-max-time 30 --silent http://metadata.google.internal/computeMetadata/v1/project/project-id))'
                    ZONE='$(basename $(curl -L --fail --header 'Metadata-Flavor: Google' --retry 5 --retry-max-time 30 --silent http://metadata.google.internal/computeMetadata/v1/instance/zone))'
                    LABELS='$(curl -L --fail --header 'Metadata-Flavor: Google' --silent http://metadata.google.internal/computeMetadata/v1/instance/attributes/labels || echo '{}')'
                    EOF
                  - systemctl daemon-reload
                  - systemctl restart docker
                  - systemctl start cadvisor.service
                  - systemctl start grafana-agent.service
                  - systemctl start grafana-agent-vault-bootstrap.service
                  - systemctl start node-exporter.service
                
                final_message: system configuration completed!
            EOT
            # (3 unchanged elements hidden)
        }
      ~ metadata_fingerprint = "PwIpXChbwGc=" -> (known after apply)
      ~ name                 = "grafana-gcp-metrics-20241204123035469900000002" -> (known after apply)
      ~ region               = "us-central1" -> (known after apply)
      ~ self_link            = "https://www.googleapis.com/compute/v1/projects/vault-0/global/instanceTemplates/grafana-gcp-metrics-20241204123035469900000002" -> (known after apply)
      ~ self_link_unique     = "https://www.googleapis.com/compute/v1/projects/vault-0/global/instanceTemplates/grafana-gcp-metrics-20241204123035469900000002?uniqueId=8993875517689951620" -> (known after apply)
        tags                 = [
            "grafana-gcp-metrics",
        ]
      + tags_fingerprint     = (known after apply)
        # (10 unchanged attributes hidden)

      ~ confidential_instance_config (known after apply)

      ~ disk {
          ~ interface             = "SCSI" -> (known after apply)
          ~ provisioned_iops      = 0 -> (known after apply)
          - resource_manager_tags = {} -> null
          - resource_policies     = [] -> null
          ~ source_image          = "projects/cos-cloud/global/images/cos-105-17412-101-24" -> "cos-cloud/cos-117-18613-164-38" # forces replacement
          ~ type                  = "PERSISTENT" -> (known after apply)
            # (10 unchanged attributes hidden)
        }

      ~ network_interface {
          ~ internal_ipv6_prefix_length = 0 -> (known after apply)
          + ipv6_access_type            = (known after apply)
          + ipv6_address                = (known after apply)
          ~ name                        = "nic0" -> (known after apply)
          ~ network                     = "https://www.googleapis.com/compute/v1/projects/vault-0/global/networks/grafana-observability" -> (known after apply)
          - queue_count                 = 0 -> null
          + stack_type                  = (known after apply)
          ~ subnetwork_project          = "vault-0" -> (known after apply)
            # (3 unchanged attributes hidden)
        }

      ~ scheduling {
          - min_node_cpus               = 0 -> null
          ~ provisioning_model          = "STANDARD" -> (known after apply)
            # (4 unchanged attributes hidden)
        }

        # (2 unchanged blocks hidden)
    }

Plan: 5 to add, 6 to change, 3 to destroy.
